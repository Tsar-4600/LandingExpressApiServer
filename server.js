// server.js
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const https = require('https');
const querystring = require('querystring');
const rateLimit = require('express-rate-limit');

const app = express();
const PORT = 3001;

app.set('trust proxy', 1); // –î–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–∫—Å–∏ (nginx)

// Middleware
app.use(cors({
    origin: [
        'https://zoomlion.gkvertikal.ru',
    ],
    methods: ['GET', 'POST', 'OPTIONS'], // —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
    allowedHeaders: ['Content-Type', 'Authorization'], // —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    credentials: false, // true —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫—É–∫–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    optionsSuccessStatus: 200 // –¥–ª—è legacy –±—Ä–∞—É–∑–µ—Ä–æ–≤
}));
app.use(express.json());

// –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const validateName = (name) => {
    if (!name || typeof name !== 'string') return false;
    const trimmedName = name.trim();
    return trimmedName.length >= 2 && trimmedName.length <= 50;
};

const validatePhone = (phone) => {
    if (!phone || typeof phone !== 'string') return false;
    // –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞: +7, 8, –∏–ª–∏ –±–µ–∑ –∫–æ–¥–∞ (10 —Ü–∏—Ñ—Ä)
    const phoneRegex = /^(\+7|8|7)?[\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
    return phoneRegex.test(phone.replace(/\s/g, ''));
};

const validateModel = (model) => {
    return model && typeof model === 'string' && model.trim().length > 0;
};

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const validateRequest = (fields) => {
    return (req, res, next) => {
        const errors = [];

        if (fields.includes('name') && !validateName(req.body.name)) {
            errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤');
        }

        if (fields.includes('phone') && !validatePhone(req.body.phone)) {
            errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        }

        if (fields.includes('model') && !validateModel(req.body.model)) {
            errors.push('–ú–æ–¥–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
        }

        if (errors.length > 0) {
            return res.status(400).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                errors: errors
            });
        }

        next();
    };
};
// –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å 
const getMoscowTime = () => {
    return new Date().toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        hour12: false
    });
};
//limiter –∑–∞–ø—Ä–æ—Å–æ–≤

const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 45 minutes
    limit: 1, // Limit each IP to 100 requests per `window` (here, per 1 minute).
    standardHeaders: 'draft-8', // draft-6: `RateLimit-*` headers; draft-7 & draft-8: combined `RateLimit` header
    legacyHeaders: false, // Disable the `X-RateLimit-*` headers.
    ipv6Subnet: 64, // Set to 60 or 64 to be less aggressive, or 52 or 48 to be more aggressive
    // store: ... , // Redis, Memcached, etc. See below.
})

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ —Å calltouch

const sendToCallTouch = (data) => {
    return new Promise((resolve, reject) => {
        try {
            const params = {
                subject: data.subject || '–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ zoomlion.gkvertikal.ru',
                requestUrl: data.requestUrl || `${process.env.SITE_URL}`,
                fio: data.name || '',
                phoneNumber: data.phone || '',
                ...(data.model && { model: data.model })
            };

            const postData = querystring.stringify(params);

            const options = {
                hostname: `${process.env.CALLTOUCH_HOST}`,
                port: 443,
                path: `${process.env.CALLTOUCH_API_PATH}/${process.env.CALLTOUCH_SITE_ID}/register/`,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': Buffer.byteLength(postData)
                }
            };

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ POST –≤ CallTouch:', params);

            const req = https.request(options, (response) => {
                let responseData = '';

                response.on('data', (chunk) => {
                    responseData += chunk;
                });

                response.on('end', () => {
                    try {
                        const parsedData = JSON.parse(responseData);
                        console.log('‚úÖ CallTouch –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ');
                        resolve({
                            success: true,
                            data: parsedData,
                            statusCode: response.statusCode
                        });
                    } catch (parseError) {
                        console.log('‚úÖ CallTouch –æ—Ç–≤–µ—Ç–∏–ª (–Ω–µ JSON):', responseData);
                        resolve({
                            success: true,
                            data: responseData,
                            statusCode: response.statusCode
                        });
                    }
                });
            });

            req.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
                resolve({
                    success: false,
                    error: error.message,
                    statusCode: 0
                });
            });

            req.setTimeout(10000, () => {
                req.destroy();
                console.error('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ CallTouch');
                resolve({
                    success: false,
                    error: 'Timeout',
                    statusCode: 0
                });
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            req.write(postData);
            req.end();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error.message);
            resolve({
                success: false,
                error: error.message,
                statusCode: 0
            });
        }
    });
};

// –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
const productsData = require('./products');

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
app.get('/api/products', (req, res) => {
    res.json(productsData);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});

// –ù–æ–≤—ã–π endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
app.post('/api/submit-model', limiter, validateRequest(['name', 'phone', 'model']), async (req, res) => {
    try {
        const { name, phone, model } = req.body;

        console.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞:');
        console.log('üë§ –ò–º—è:', name.trim());
        console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', phone);
        console.log('üöó –ú–æ–¥–µ–ª—å:', model.trim());
        console.log('‚è∞ –í—Ä–µ–º—è:', getMoscowTime())
        console.log('---');

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        res.status(200).json({
            success: true,
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞',
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CallTouch —á–µ—Ä–µ–∑ POST
        const calltouchResult = await sendToCallTouch({
            subject: `zoomlion.gkvertikal.ru –ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å: ${model}`,
            name: name.trim(),
            phone: phone,
            model: model.trim(),
            requestUrl: req.headers.referer || 'https://zoomlion.gkvertikal.ru/'
        });
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CallTouch:', calltouchResult.success ? '–£—Å–ø–µ—Ö' : '–û—à–∏–±–∫–∞');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

app.post('/api/submit-SpeacialLease', limiter, validateRequest(['name', 'phone']), async (req, res) => {
    try {
        const { name, phone } = req.body;

        console.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–∏–∑–∏–Ω–≥:');
        console.log('üë§ –ò–º—è:', name.trim());
        console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', phone);
        console.log('‚è∞ –í—Ä–µ–º—è:', getMoscowTime())
        console.log('---');

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        // 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // 2. –û—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CRM —Å–∏—Å—Ç–µ–º–æ–π

        res.status(200).json({
            success: true,
            message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–∏–∑–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞',
        });


        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CallTouch —á–µ—Ä–µ–∑ POST
        const calltouchResult = await sendToCallTouch({
            subject: `zoomlion.gkvertikal.ru –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–µ—Ü –õ–∏–∑–∏–Ω–≥`,
            name: name.trim(),
            phone: phone,
            requestUrl: req.headers.referer || 'https://zoomlion.gkvertikal.ru/'
        });
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CallTouch:', calltouchResult.success ? '–£—Å–ø–µ—Ö' : '–û—à–∏–±–∫–∞');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–∏–∑–∏–Ω–≥:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

app.post('/api/submit-contacts', limiter, validateRequest(['name', 'phone']), async (req, res) => {
    try {
        const { name, phone } = req.body;

        console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
        console.log('üë§ –ò–º—è:', name.trim());
        console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', phone);
        console.log('‚è∞ –í—Ä–µ–º—è:', getMoscowTime())
        console.log('---');

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        // 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // 2. –û—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CRM —Å–∏—Å—Ç–µ–º–æ–π

        res.status(200).json({
            success: true,
            message: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã',
        });


        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CallTouch —á–µ—Ä–µ–∑ POST
        const calltouchResult = await sendToCallTouch({
            subject: `zoomlion.gkvertikal.ru –∑–∞—è–≤–∫–∞ –∏–∑ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`,
            name: name.trim(),
            phone: phone,
            requestUrl: req.headers.referer || 'https://zoomlion.gkvertikal.ru/'
        });
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CallTouch:', calltouchResult.success ? '–£—Å–ø–µ—Ö' : '–û—à–∏–±–∫–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});