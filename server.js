// server.js
const express = require('express');
const cors = require('cors');
const app = express();
const PORT = 3001;

// Middleware
app.use(cors());
app.use(express.json());

// –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const validateName = (name) => {
    if (!name || typeof name !== 'string') return false;
    const trimmedName = name.trim();
    return trimmedName.length >= 2 && trimmedName.length <= 50;
};

const validatePhone = (phone) => {
    if (!phone || typeof phone !== 'string') return false;
    // –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞: +7, 8, –∏–ª–∏ –±–µ–∑ –∫–æ–¥–∞ (10 —Ü–∏—Ñ—Ä)
    const phoneRegex = /^(\+7|8|7)?[\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;
    return phoneRegex.test(phone.replace(/\s/g, ''));
};

const validateModel = (model) => {
    return model && typeof model === 'string' && model.trim().length > 0;
};

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const validateRequest = (fields) => {
    return (req, res, next) => {
        const errors = [];
        
        if (fields.includes('name') && !validateName(req.body.name)) {
            errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        
        if (fields.includes('phone') && !validatePhone(req.body.phone)) {
            errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        }
        
        if (fields.includes('model') && !validateModel(req.body.model)) {
            errors.push('–ú–æ–¥–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
        }
        
        if (errors.length > 0) {
            return res.status(400).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                errors: errors
            });
        }
        
        next();
    };
};

// –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
const productsData = require('./products');

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
app.get('/api/products', (req, res) => {
    res.json(productsData);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});

// –ù–æ–≤—ã–π endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
app.post('/api/submit-model', validateRequest(['name', 'phone', 'model']), (req, res) => {
    try {
        const { name, phone, model } = req.body;
        
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞:');
        console.log('üë§ –ò–º—è:', name.trim());
        console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', phone);
        console.log('üöó –ú–æ–¥–µ–ª—å:', model.trim());
        console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toLocaleString());
        console.log('---');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        res.status(200).json({
            success: true,
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞',
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

app.post('/api/submit-SpeacialLease', validateRequest(['name', 'phone']), (req, res) => {
    try {
        const { name, phone } = req.body;
        
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–∏–∑–∏–Ω–≥:');
        console.log('üë§ –ò–º—è:', name.trim());
        console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', phone);
        console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toLocaleString());
        console.log('---');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        // 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // 2. –û—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CRM —Å–∏—Å—Ç–µ–º–æ–π
        
        res.status(200).json({
            success: true,
            message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–∏–∑–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞',
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–∏–∑–∏–Ω–≥:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

app.post('/api/submit-contacts', validateRequest(['name', 'phone']), (req, res) => {
    try {
        const { name, phone } = req.body;
        
        console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
        console.log('üë§ –ò–º—è:', name.trim());
        console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', phone);
        console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toLocaleString());
        console.log('---');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        // 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // 2. –û—Ç–ø—Ä–∞–≤–∫—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CRM —Å–∏—Å—Ç–µ–º–æ–π
        
        res.status(200).json({
            success: true,
            message: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã',
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});